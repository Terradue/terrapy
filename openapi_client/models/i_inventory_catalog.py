# coding: utf-8

"""
    TerrAPI

    Terradue Core API v2

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.auth_resource_type import AuthResourceType
from openapi_client.models.content_disposition import ContentDisposition
from openapi_client.models.content_type import ContentType
from openapi_client.models.i_resource_status import IResourceStatus
from openapi_client.models.inventory_type import InventoryType
from openapi_client.models.resource_type import ResourceType
from typing import Optional, Set
from typing_extensions import Self

class IInventoryCatalog(BaseModel):
    """
    IInventoryCatalog
    """ # noqa: E501
    inventory_type: InventoryType = Field(alias="inventoryType")
    inventory_point_uri: StrictStr = Field(alias="inventoryPointUri")
    initialized: Optional[StrictBool] = None
    remote_id: Optional[StrictStr] = Field(default=None, alias="remoteId")
    resource_server: Optional[StrictStr] = Field(default=None, alias="resourceServer")
    owner: Optional[StrictStr] = None
    type: AuthResourceType
    status: Optional[IResourceStatus] = None
    resource_uris: List[StrictStr]
    scopes: Optional[List[StrictStr]] = None
    properties: Dict[str, List[Any]]
    platform_id: Optional[StrictStr] = Field(default=None, alias="platformId")
    name: Annotated[str, Field(min_length=1, strict=True)]
    var_self: Optional[StrictStr] = Field(default=None, alias="self")
    background_job_id: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    content_type: Optional[ContentType] = Field(default=None, alias="contentType")
    resource_type: Optional[ResourceType] = Field(default=None, alias="resourceType")
    content_length: Optional[StrictInt] = Field(default=None, alias="contentLength")
    content_disposition: Optional[ContentDisposition] = Field(default=None, alias="contentDisposition")
    uri: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["inventoryType", "inventoryPointUri", "initialized", "remoteId", "resourceServer", "owner", "type", "status", "resource_uris", "scopes", "properties", "platformId", "name", "self", "background_job_id", "title", "id", "contentType", "resourceType", "contentLength", "contentDisposition", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IInventoryCatalog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "inventory_point_uri",
            "initialized",
            "remote_id",
            "resource_server",
            "owner",
            "resource_uris",
            "scopes",
            "properties",
            "platform_id",
            "name",
            "title",
            "id",
            "content_length",
            "uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_type
        if self.content_type:
            _dict['contentType'] = self.content_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_disposition
        if self.content_disposition:
            _dict['contentDisposition'] = self.content_disposition.to_dict()
        # set to None if remote_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_id is None and "remote_id" in self.model_fields_set:
            _dict['remoteId'] = None

        # set to None if resource_server (nullable) is None
        # and model_fields_set contains the field
        if self.resource_server is None and "resource_server" in self.model_fields_set:
            _dict['resourceServer'] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict['owner'] = None

        # set to None if scopes (nullable) is None
        # and model_fields_set contains the field
        if self.scopes is None and "scopes" in self.model_fields_set:
            _dict['scopes'] = None

        # set to None if platform_id (nullable) is None
        # and model_fields_set contains the field
        if self.platform_id is None and "platform_id" in self.model_fields_set:
            _dict['platformId'] = None

        # set to None if var_self (nullable) is None
        # and model_fields_set contains the field
        if self.var_self is None and "var_self" in self.model_fields_set:
            _dict['self'] = None

        # set to None if background_job_id (nullable) is None
        # and model_fields_set contains the field
        if self.background_job_id is None and "background_job_id" in self.model_fields_set:
            _dict['background_job_id'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if uri (nullable) is None
        # and model_fields_set contains the field
        if self.uri is None and "uri" in self.model_fields_set:
            _dict['uri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IInventoryCatalog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inventoryType": obj.get("inventoryType"),
            "inventoryPointUri": obj.get("inventoryPointUri"),
            "initialized": obj.get("initialized"),
            "remoteId": obj.get("remoteId"),
            "resourceServer": obj.get("resourceServer"),
            "owner": obj.get("owner"),
            "type": obj.get("type"),
            "status": IResourceStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "resource_uris": obj.get("resource_uris"),
            "scopes": obj.get("scopes"),
            "properties": obj.get("properties"),
            "platformId": obj.get("platformId"),
            "name": obj.get("name"),
            "self": obj.get("self"),
            "background_job_id": obj.get("background_job_id"),
            "title": obj.get("title"),
            "id": obj.get("id"),
            "contentType": ContentType.from_dict(obj["contentType"]) if obj.get("contentType") is not None else None,
            "resourceType": obj.get("resourceType"),
            "contentLength": obj.get("contentLength"),
            "contentDisposition": ContentDisposition.from_dict(obj["contentDisposition"]) if obj.get("contentDisposition") is not None else None,
            "uri": obj.get("uri")
        })
        return _obj


