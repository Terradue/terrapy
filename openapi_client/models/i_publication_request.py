# coding: utf-8

"""
    TerrAPI

    Terradue Core API v2

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.i_subject import ISubject
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class IPublicationRequest(BaseModel):
    """
    IPublicationRequest
    """ # noqa: E501
    id: Optional[StrictStr] = None
    background_job_id: Optional[StrictStr] = Field(default=None, alias="backgroundJobId")
    url: Optional[StrictStr] = None
    catalog_id: Optional[StrictStr] = Field(default=None, alias="catalogId")
    additional_links: Optional[List[Link]] = Field(default=None, alias="additionalLinks")
    subjects: Optional[List[ISubject]] = None
    collection: Optional[StrictStr] = None
    depth: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "backgroundJobId", "url", "catalogId", "additionalLinks", "subjects", "collection", "depth"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPublicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "background_job_id",
            "url",
            "catalog_id",
            "additional_links",
            "subjects",
            "collection",
            "depth",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_links (list)
        _items = []
        if self.additional_links:
            for _item in self.additional_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subjects (list)
        _items = []
        if self.subjects:
            for _item in self.subjects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subjects'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if background_job_id (nullable) is None
        # and model_fields_set contains the field
        if self.background_job_id is None and "background_job_id" in self.model_fields_set:
            _dict['backgroundJobId'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if catalog_id (nullable) is None
        # and model_fields_set contains the field
        if self.catalog_id is None and "catalog_id" in self.model_fields_set:
            _dict['catalogId'] = None

        # set to None if additional_links (nullable) is None
        # and model_fields_set contains the field
        if self.additional_links is None and "additional_links" in self.model_fields_set:
            _dict['additionalLinks'] = None

        # set to None if subjects (nullable) is None
        # and model_fields_set contains the field
        if self.subjects is None and "subjects" in self.model_fields_set:
            _dict['subjects'] = None

        # set to None if collection (nullable) is None
        # and model_fields_set contains the field
        if self.collection is None and "collection" in self.model_fields_set:
            _dict['collection'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPublicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "backgroundJobId": obj.get("backgroundJobId"),
            "url": obj.get("url"),
            "catalogId": obj.get("catalogId"),
            "additionalLinks": [Link.from_dict(_item) for _item in obj["additionalLinks"]] if obj.get("additionalLinks") is not None else None,
            "subjects": [ISubject.from_dict(_item) for _item in obj["subjects"]] if obj.get("subjects") is not None else None,
            "collection": obj.get("collection"),
            "depth": obj.get("depth")
        })
        return _obj


