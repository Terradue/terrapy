# coding: utf-8

"""
    TerrAPI

    Terradue Core API v2

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_token import AccessToken
from openapi_client.models.claim_lite import ClaimLite
from typing import Optional, Set
from typing_extensions import Self

class PrincipalContext(BaseModel):
    """
    Represents the context of a principal, which provides access to identity-related information and functionality.
    """ # noqa: E501
    tokens: Optional[AccessToken] = None
    name: Optional[StrictStr] = Field(default=None, description="Gets the name of the principal.")
    claims: Optional[List[ClaimLite]] = Field(default=None, description="Gets the claims associated with the principal.")
    __properties: ClassVar[List[str]] = ["tokens", "name", "claims"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrincipalContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "claims",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tokens
        if self.tokens:
            _dict['tokens'] = self.tokens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in claims (list)
        _items = []
        if self.claims:
            for _item in self.claims:
                if _item:
                    _items.append(_item.to_dict())
            _dict['claims'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if claims (nullable) is None
        # and model_fields_set contains the field
        if self.claims is None and "claims" in self.model_fields_set:
            _dict['claims'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrincipalContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tokens": AccessToken.from_dict(obj["tokens"]) if obj.get("tokens") is not None else None,
            "name": obj.get("name"),
            "claims": [ClaimLite.from_dict(_item) for _item in obj["claims"]] if obj.get("claims") is not None else None
        })
        return _obj


